
package com.zediel.itemstest;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;

import org.apache.http.util.EncodingUtils;

import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnKeyListener;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.fm.FmConsts.FmAudioPath;
import android.hardware.fm.FmConsts.FmSearchDirection;
import android.hardware.fm.FmManager;
import android.media.AudioManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Message;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.TextView;

import com.zediel.engsql.ZedielSqlite;
import com.zediel.pcbtest.R;


public class FMTest extends Activity {

    private TextView waveBandText;
    private Button searchButton;
    private static final String RADIO_DEVICE = "/dev/radio0";
    private int freq = 88700;
    private static final int TRANS_MULT = 10;
    private static final String SPRD_FM_TEST_FILE = "fm2.txt";
    private static final String PATH = "/data/data/com.zediel.pcbtest";
    private static final String HEADSET_STATE_PATH = "/sys/class/switch/h2w/state";
    private Dialog mDialog = null;
    private static final int HEADSET_DIALOG = 1;
    protected Button mPassButton;
    protected Button mFailButton;
    private static final int TEXT_SIZE = 30;
    protected String mTestCaseName = null;
    private int isFullTest = 0;
    private int fullTestActivityId;
    private static String TAG = "FMTest";
    private int RADIO_MIN_FREQUENCY = 87500;
    private int RADIO_MAX_FREQUENCY = 108000;
    private final int FM_SEARCH_TIMEOUT = 30000;
    private static final int MSG_SEARCH_FINISH = 3;
    ProgressDialog mSearchStationDialog = null;
    private Context mContext;
    private boolean mSearchStationRunning = false;
    private FmManager mFmManager = null;
    private FmAudioPath mAudioPath;

    private int groupId;

    private static final int MSG_SET_VOLUME = 1;
    private HandlerThread mHandlerThread = null;
    private Handler mVolumeHandler = null;
    private ZedielSqlite mZedielSqlite;
   /* private Runnable mR = new Runnable() {
        public void run() {
            showResultDialog(getString(R.string.wb_text_info));
        }
    };*/

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON,
                WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        setContentView(R.layout.fm_test);
       // setTitle(R.string.fm_test);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
        mContext = this.getApplicationContext();
        groupId = this.getIntent().getIntExtra("groupId", 0);
       // mPassButton = (Button) findViewById(R.id.btn_pass);
       // mFailButton = (Button) findViewById(R.id.btn_fail);
       // mPassButton.setVisibility(View.GONE);
        //mFailButton.setVisibility(View.GONE);
        mZedielSqlite = ZedielSqlite.getInstance(this);
       // findViewById(R.id.btn_retry).setVisibility(View.GONE);
        waveBandText = (TextView) findViewById(R.id.wave_band_textView);
        searchButton = (Button) findViewById(R.id.search_button);
        searchButton.setTextSize(TEXT_SIZE);
        searchButton.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                if (!isHeadsetExists()) {
                    showDialog(HEADSET_DIALOG);
                    return;
                }
                waveBandText.setText(getResources().getString(R.string.fm_test_search_station));
                mSearchStationRunning = true;
                startSearchstation();
            }
        });
        mSearchStationDialog = new ProgressDialog(this);
        mSearchStationDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
        mSearchStationDialog.setMessage(getResources().getString(R.string.fm_test_search_station));
        mSearchStationDialog.setIndeterminate(false);
        mSearchStationDialog.setCancelable(false);
        mSearchStationDialog.setOnKeyListener(new OnKeyListener() {
            public boolean onKey(DialogInterface dialoge, int keyCode,
                    KeyEvent event) {
                if (KeyEvent.KEYCODE_SEARCH == keyCode || KeyEvent.KEYCODE_HOME == keyCode) {
                    return true;
                }
                return false;
            }
        });
        if (!isHeadsetExists()) {
            showDialog(HEADSET_DIALOG);
            return;
        }

        mHandlerThread = new HandlerThread("handler_thread");
        if (mHandlerThread != null) {
            mHandlerThread.start();
            mVolumeHandler = new Handler(mHandlerThread.getLooper()) {
                public void handleMessage(Message msg) {
                    if (msg != null) {
                        removeMessages(msg.what);
                        AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                        am.setParameter("FM_Volume", "" + msg.arg1);
                        mFmManager.setVolume(msg.arg1);
                    }
                }
            };
        }
    }

    class SearchStationThread extends Thread {
        boolean isRunning = false;

        public boolean isRunning() {
            return isRunning;
        }

        public void run() {
            isRunning = true;
            searchStation();
            isRunning = false;
        };
    };

    private void startSearchstation() {
        SearchStationThread mSearchStationThread = new SearchStationThread();
        if (!mSearchStationThread.isAlive() && !mSearchStationThread.isRunning()) {
            if (!mSearchStationDialog.isShowing()) {
                mSearchStationDialog.show();
            }
            mSearchStationThread.start();
        }
    }

    private BroadcastReceiver volumeReceiver = new BroadcastReceiver() {

        public void onReceive(Context context, Intent intent) {
            if (intent.hasExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE)
                    && intent.hasExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE)) {
                int streamType = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1);
                if (streamType == AudioManager.STREAM_FM) {
                    int value = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, -1);
                    if (value != -1) {
                        if (mVolumeHandler != null) {
                            Message msg = mVolumeHandler.obtainMessage(MSG_SET_VOLUME);
                            msg.arg1 = value;
                            mVolumeHandler.sendMessage(msg);
                        }
                    }
                }
            }
        }
    };

   /* protected Dialog onCreateDialog(int id) {
        switch (id) {
            case HEADSET_DIALOG: {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                mDialog = builder.setTitle(R.string.fm_dialog_tittle)
                        .setMessage(R.string.fm_dialog_message).create();
                mDialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
                    public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
                        if (keyCode == KeyEvent.KEYCODE_BACK) {
                            if (mDialog != null)
                                mDialog.cancel();
                            return true;
                        } else if (keyCode == KeyEvent.KEYCODE_SEARCH) {
                            return true;
                        }
                        return false;
                    }
                });
                return mDialog;
            }
        }
        return null;
    }*/

    private BroadcastReceiver earphonePluginReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent earphoneIntent) {
            if (earphoneIntent != null && earphoneIntent.getAction() != null) {
                if (earphoneIntent.getAction().equalsIgnoreCase(
                        Intent.ACTION_HEADSET_PLUG)) {
                    int st = 0;
                    st = earphoneIntent.getIntExtra("state", 0);
                    if (st > 0) {
                        if (mDialog != null) {
                            mDialog.cancel();
                        }
                        String initfreq = readFromFile(mContext);
                        if (initfreq == null) {
                            syncFMFreq();
                            initfreq = readFromFile(mContext);
                        }
                        if (initfreq == null) {
                            waveBandText.setText(getResources().getString(
                                    R.string.fm_test_search_station));
                            mSearchStationRunning = true;
                            startSearchstation();
                        } else {
                            try {
                                int freq = Integer.parseInt(initfreq);
                                mFmManager.setFreq(freq);
                                waveBandText.setText(getResources().getString(R.string.wb_text)
                                        + " " + (freq * 1.0 / 1000.0) + " MHz");
                               // mHandler.postDelayed(mR, 3000);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    else if (st == 0) {
                        waveBandText.setText("");
                        showDialog(HEADSET_DIALOG);
                    }
                }
            }
        }
    };

    @Override
    protected void onResume() {
        super.onResume();
        IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_HEADSET_PLUG);
        registerReceiver(earphonePluginReceiver, filter);
        IntentFilter filter2 = new IntentFilter();
        filter2.addAction(AudioManager.VOLUME_CHANGED_ACTION);
        registerReceiver(volumeReceiver, filter2);
        Intent intent = new Intent(Intent.ACTION_FM);
        intent.putExtra("state", 1);
        intent.putExtra("speaker", 0);
        sendBroadcast(intent);
        mFmManager = new FmManager(this);
        mFmManager.powerUp();
        mAudioPath = mFmManager.getAudioPath();
        mFmManager.setAudioPath(FmAudioPath.FM_AUDIO_PATH_HEADSET);
        if (isHeadsetExists()) {
            String initfreq = readFromFile(mContext);
            if (initfreq == null) {
                syncFMFreq();
                initfreq = readFromFile(mContext);
            }
            if (initfreq == null) {
                waveBandText.setText(getResources().getString(R.string.fm_test_search_station));
                mSearchStationDialog.show();
                mSearchStationRunning = true;
                if (!mSearchStationRunning)
                    startSearchstation();
            } else {
                try {
                    int freq = Integer.parseInt(initfreq);
                    AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                    int volume = am.getStreamVolume(AudioManager.STREAM_FM);
                    mFmManager.setFreq(freq);
                    waveBandText.setText(getResources().getString(R.string.wb_text) + " "
                            + (freq * 1.0 / 1000.0) + " MHz");
                    //mHandler.postDelayed(mR, 3000);
                    if (mVolumeHandler != null) {
                        Message msg = mVolumeHandler.obtainMessage(MSG_SET_VOLUME);
                        msg.arg1 = volume;
                        mVolumeHandler.sendMessage(msg);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private Handler mHandler = new Handler() {
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case MSG_SEARCH_FINISH:
                    Bundle data = msg.getData();
                    int freq = data.getInt("freq");
                    SavedToText(mContext, freq);
                    syncFMFreq();
                    mFmManager.setFreq(freq);
                    waveBandText.setText(getResources().getString(R.string.wb_text) + " "
                            + (freq * 1.0 / 1000.0) + " MHz");
                   // showResultDialog(getString(R.string.wb_text_info));
                    mSearchStationRunning = false;
                    break;
                default:
            }
        }
    };

    @Override
    protected void onPause() {
        super.onPause();
        Intent intent = new Intent(Intent.ACTION_FM);
        intent.putExtra("state", 0);
        intent.putExtra("speaker", 0);
        sendBroadcast(intent);
        mFmManager.powerDown();
        mFmManager.setAudioPath(mAudioPath);
        unregisterReceiver(earphonePluginReceiver);
        unregisterReceiver(volumeReceiver);
        mSearchStationRunning = false;
    }

    private boolean isHeadsetExists() {
        char[] buffer = new char[1024];
        int newState = 0;
        FileReader file = null;
        try {
            file = new FileReader(HEADSET_STATE_PATH);
            int len = file.read(buffer, 0, 1024);
            newState = Integer.valueOf((new String(buffer, 0, len)).trim());
        } catch (FileNotFoundException e) {
            Log.e("FMTest", "This kernel does not have wired headset support");
        } catch (Exception e) {
            Log.e("FMTest", "", e);
        } finally {
            if (file != null) {
                try {
                    file.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return newState != 0;
    }

    private void searchStation() {
        int freq = RADIO_MIN_FREQUENCY;
        boolean value = false;
        int prev = 0;
        Bundle data = new Bundle();
        while (freq <= RADIO_MAX_FREQUENCY) {
            value = mFmManager.startSearch(RADIO_MIN_FREQUENCY, FmSearchDirection.FM_SEARCH_UP,
                    FM_SEARCH_TIMEOUT);
            if (value == false) {
                Log.e(TAG, "current no search frequency");
                return;
            }
            freq = getFreq();
            if (freq <= prev || freq >= RADIO_MAX_FREQUENCY) {
                Log.e(TAG, "current frequency is unnormal value=" + freq + "," + prev);
                return;
            }
            if (freq != prev) {
                prev = freq;
                break;
            }
        }
        if (mHandler != null) {
            data.putInt("freq", prev);
            Message msg = mHandler.obtainMessage(MSG_SEARCH_FINISH);
            msg.setData(data);
            mHandler.sendMessage(msg);
            Log.d(TAG, "MSG_SEARCH_FINISH");
        }
        mSearchStationDialog.cancel();
    }

    public int getFreq() {
        int freq = -1;
        int iFreq = mFmManager.getFreq();
        if (iFreq > 0) {
            freq = iFreq;
        }
        return freq;
    }

    private boolean hasSDCard() {
        boolean hasSDCard = false;
        hasSDCard = Environment.getExternalStoragePathState().equals(
                Environment.MEDIA_MOUNTED);
        return hasSDCard;
    }

    private String readFromFile(Context context) {

        String readString = null;
        File storefile = new File(/*"/data/data/com.sprd.validationtools"*/PATH
                + "/fm2.txt");
        FileInputStream fis = null;
        try {
            Log.d(TAG, "hasSDCard");
            if (storefile.exists()) {
                Log.d(TAG, "readFile");
                fis = new FileInputStream(storefile);
                int length = fis.available();
                byte buffer[] = new byte[length];
                fis.read(buffer);
                readString = EncodingUtils.getString(buffer, "UTF-8");
                if (readString.equals("nofm") || readString.length() < 4)
                    readString = null;
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return readString;
    }

    private void syncFMFreq() {
        String readString = null;
        File storefile = new File(Environment.getExternalStoragePath(), SPRD_FM_TEST_FILE);
        FileInputStream fis = null;
        try {
            Log.d(TAG, "hasSDCard");
            if (storefile.exists()) {
                Log.d(TAG, "readFile");
                fis = new FileInputStream(storefile);
                int length = fis.available();
                byte buffer[] = new byte[length];
                fis.read(buffer);
                readString = EncodingUtils.getString(buffer, "UTF-8");
                Log.d(TAG, readString);
                if (readString.equals("nofm") || readString.length() < 4) {
                    readString = null;
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        if (readString != null) {
            SavedToText(this, Integer.parseInt(readString.trim()));
        }
    }

    private void SavedToText(Context context, int freq) {
        String s = String.valueOf(freq);
        File storefile = new File(/*"/data/data/com.sprd.validationtools"*/PATH
                + "/fm2.txt");
        Log.d(TAG, storefile.getPath());
        FileOutputStream fos = null;
        try {
            Log.d(TAG, "hasSDCard");
            if (!storefile.exists()) {
                Log.d(TAG, "createFile");
                storefile.createNewFile();
            }
            fos = new FileOutputStream(storefile);
            byte[] buffer = s.getBytes();
            fos.write(buffer);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        if (hasSDCard()) {
            saveToSdCard(freq);
        }
    }

    private void saveToSdCard(int freq) {
        String s = String.valueOf(freq);
        File storefile = new File(Environment.getExternalStoragePath(), SPRD_FM_TEST_FILE);
        Log.d(TAG, storefile.getPath());
        FileOutputStream fos = null;
        try {
            Log.d(TAG, "hasSDCard");
            if (!storefile.exists()) {
                Log.d(TAG, "createFile");
                storefile.createNewFile();
            }
            fos = new FileOutputStream(storefile);
            byte[] buffer = s.getBytes();
            fos.write(buffer);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    @Override
    public void onDestroy() {
        if (mVolumeHandler != null) {
            mVolumeHandler.removeMessages(MSG_SET_VOLUME);
            mVolumeHandler.removeCallbacksAndMessages(null);
            mVolumeHandler = null;
            mHandlerThread.quit();
            mHandlerThread = null;
        }
        //mHandler.removeCallbacks(mR);
        super.onDestroy();
    }
}
