commit 7d9f58df396c279e68f2eaae8553ab13ce089a67
Author: yuntao.xiao <yuntao.xiao@spreadtrum.com>
Date:   Tue Sep 22 18:52:54 2015 +0800

    Bug #474603 Add plugin building and common features config path declaring
    
    [root cause  ]feature build request
    [changes     ]Add feature building functions
    [side effects]nil
    [self test   ]<All Platform, SanityTest>:PASS
    [reviewers   ]
    
    [change_type ] feature
    [tag_product ] common
    
    Change-Id: Ide98cf26fe953cbdf59e505958ffe1e5d8d235e1

diff --git a/core/config.mk b/core/config.mk
index 51810aa..09ff5ae 100644
--- a/core/config.mk
+++ b/core/config.mk
@@ -96,6 +96,11 @@ BUILD_NOTICE_FILE := $(BUILD_SYSTEM)/notice_files.mk
 BUILD_HOST_DALVIK_JAVA_LIBRARY := $(BUILD_SYSTEM)/host_dalvik_java_library.mk
 BUILD_HOST_DALVIK_STATIC_JAVA_LIBRARY := $(BUILD_SYSTEM)/host_dalvik_static_java_library.mk
 
+############# vendor configs ################
+BUILD_THEME_PACKAGE := $(BUILD_SYSTEM_VENDOR)/themepackage.mk
+BUILD_ADDON_PACKAGE := $(BUILD_PACKAGE)
+APPLY_PRODUCT_REVISION:= build/vendor/product_config.mk
+#$(BUILD_SYSTEM_VENDOR)/product_config.mk
 
 # ###############################################################
 # Parse out any modifier targets.
diff --git a/core/main.mk b/core/main.mk
index 5d3898b..61e0aa7 100644
--- a/core/main.mk
+++ b/core/main.mk
@@ -59,6 +59,7 @@ TOP := .
 TOPDIR :=
 
 BUILD_SYSTEM := $(TOPDIR)build/core
+BUILD_SYSTEM_VENDOR := $(TOPDIR)build/vendor
 
 # This is the default target.  It must be the first declared target.
 .PHONY: droid
diff --git a/vendor/clear_vars_vendor.mk b/vendor/clear_vars_vendor.mk
new file mode 100644
index 0000000..21a24f4
--- /dev/null
+++ b/vendor/clear_vars_vendor.mk
@@ -0,0 +1,27 @@
+# Spreadtrum additional build vars cleanner, additional build
+# script and take them in vendor for porting easier
+
+# Clear build packages
+LOCAL_THEME_OVERLAY_PACKAGE :=
+#com.android.mms
+# LOCAL_THEME_GENERATE_PATH :=
+LOCAL_THEME_RESOURCES :=
+#res/
+LOCAL_THEME_DUMMY_MANIFEST :=
+#AndroidManifest.xml
+LOCAL_THEME_VALUES :=
+#$theme_values.xml
+LOCAL_THEME_NAME :=
+#HoloNewInverse
+LOCAL_BUILD_VENDOR_FLAG :=
+
+# Assume the building package can support overlay resource directly.
+LOCAL_PACKAGE_SUPPORT_OVERLAY :=
+
+# BUILD_THEMES := true
+# PRODUCT_THEMEPACKAGE_STOREPATH := $(PRODUCT_OUT)/data/theme/
+
+# Define addtional module which don't support DEX_PREOPT
+LOCAL_DISABLE_DEX_PREOPT :=
+
+LOCAL_DEPENDENCY_APPS :=
diff --git a/vendor/definitions_vendor.mk b/vendor/definitions_vendor.mk
new file mode 100644
index 0000000..42ae940
--- /dev/null
+++ b/vendor/definitions_vendor.mk
@@ -0,0 +1,12 @@
+define add-assets-to-theme-package
+$(hide) $(AAPT) package -u $(PRIVATE_AAPT_FLAGS) \
+    $(addprefix -c , $(PRIVATE_PRODUCT_AAPT_CONFIG)) \
+    $(addprefix --preferred-configurations , $(PRIVATE_PRODUCT_AAPT_PREF_CONFIG)) \
+    $(addprefix -M , $(PRIVATE_ANDROID_MANIFEST)) \
+    $(addprefix -S , $(PRIVATE_RESOURCE_DIR)) \
+    $(addprefix --product , $(TARGET_AAPT_CHARACTERISTICS)) \
+    $(addprefix --rename-manifest-package , $(PRIVATE_MANIFEST_PACKAGE_NAME)) \
+    $(addprefix --rename-instrumentation-target-package , $(PRIVATE_MANIFEST_INSTRUMENTATION_FOR)) \
+    -F $@
+$(hide) zip -g $@ -j $(PRIVATE_THEME_VALUES_FULL_PATH)
+endef
diff --git a/vendor/dummy/AndroidManifest.xml b/vendor/dummy/AndroidManifest.xml
new file mode 100644
index 0000000..a928e6f
--- /dev/null
+++ b/vendor/dummy/AndroidManifest.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+	package="com.sprdroid.resource.framework">
+</manifest> 
+
diff --git a/vendor/dummy/theme_values.xml b/vendor/dummy/theme_values.xml
new file mode 100644
index 0000000..29c84c2
--- /dev/null
+++ b/vendor/dummy/theme_values.xml
@@ -0,0 +1,2 @@
+<MIUI_Theme_Values>
+</MIUI_Theme_Values>
diff --git a/vendor/product_config.mk b/vendor/product_config.mk
new file mode 100644
index 0000000..7f2e77c
--- /dev/null
+++ b/vendor/product_config.mk
@@ -0,0 +1,84 @@
+# Spreadtrum Communication Inc.
+
+# This make file must be included after defining BOARDDIR and PLATDIR
+
+# Here is a common config dir now
+PRODUCT_REVISION_COMMON_CONFIG_PATH ?= vendor/sprd/open-source
+
+ifeq ($(strip $(PRODUCT_REVISION)),)
+# Don't warning, only show nothing to include
+# $(warning You should define the PRODUCT_REVISION before you call include APPLY_PRODUCT_REVISION)
+endif
+
+# If you want to point to another folder to control the features, declare
+# the PRODUCT_FEAULTE_LIST_PATH
+ifneq ($(strip $(PRODUCT_FEAULTE_LIST_PATH)),)
+PRIVATE_FEATURE_LIST_PATH := $(PRODUCT_FEAULTE_LIST_PATH)
+else
+PRIVATE_FEATURE_LIST_PATH := $(PLATDIR)/features $(BOARDDIR)/features $(PRODUCT_REVISION_COMMON_CONFIG_PATH)/features
+endif
+
+# If not define the PRODUCT_DEFAULT_REVISION, give the base to default
+ifeq (,$(strip $(PRODUCT_DEFAULT_REVISION)))
+PRODUCT_DEFAULT_REVISION := base
+endif
+
+# If not define the PRODUCT_REVISION, use default one.
+ifeq ($(strip $(PRODUCT_REVISION)),)
+PRODUCT_REVISION := $(PRODUCT_DEFAULT_REVISION)
+endif
+
+# If hudson or the builder define a revision, override configs before.
+ifdef HUDSON_CONFIG_REVISION
+PRIVATE_FEATURE_REVISION := $(HUDSON_CONFIG_REVISION)
+else
+PRIVATE_FEATURE_REVISION := $(PRODUCT_REVISION)
+endif
+
+# If no including for base, add base features
+ifeq (,$(strip $(filter base,$(PRIVATE_FEATURE_REVISION))))
+PRIVATE_FEATURE_REVISION += base
+endif
+
+# Debug
+#$(warning DEBUG PRIVATE_FEATURE_LIST_PATH = $(PRIVATE_FEATURE_LIST_PATH))
+#$(warning DEBUG PRIVATE_FEATURE_REVISION = $(PRIVATE_FEATURE_REVISION))
+
+# Scan PLATDIR and BOARDDIR features folder and check wether they exists.
+PRIVATE_FEATURE_MODULES := $(foreach path,$(PRIVATE_FEATURE_LIST_PATH), \
+                                $(foreach feature,$(PRIVATE_FEATURE_REVISION), \
+                                $(wildcard $(path)/$(feature)/config.mk) ))
+
+ifneq ($(wildcard $(strip $(PRIVATE_FEATURE_MODULES))),)
+# Debug
+#$(warning including $(PRIVATE_FEATURE_MODULES))
+
+# include exists config.mk files.
+include $(PRIVATE_FEATURE_MODULES)
+
+else
+$(warning Failed to apply any modules)
+endif
+
+##### After including the features, use the results to do something more.
+
+# The addon packages is equal to PRODUCT_PACKAGES, combine them.
+# TODO In future, they may be put into another partition
+FEATURES.PRODUCT_PACKAGES += $(FEATURES.PRODUCT_ADDON_PACKAGES)
+
+# Debug
+#$(warning dump FEATURES.all $(foreach v,$(_product_var_list), \
+#   FEATURES.$(v) -> $(FEATURES.$(v)) ))
+
+# Foreach FEATURES.PRODUCT* and add them to PRODUCT* currently.
+# TODO In future, they may be put into another parition
+$(foreach v,$(_product_var_list), \
+    $(eval $(v) := $(FEATURES.$(v)) $($(v))))
+
+# Debug
+#$(warning PRODUCT_PACKAGES after including $(PRODUCT_PACKAGES) PRODUCT_BOOT_JARS -> $(PRODUCT_BOOT_JARS))
+
+# clear vars
+PRIVATE_FEATURE_MODULES :=
+PRIVATE_FEATURE_LIST_PATH :=
+PRIVATE_FEATURE_REVISION :=
diff --git a/vendor/themepackage.mk b/vendor/themepackage.mk
new file mode 100644
index 0000000..c7daa02
--- /dev/null
+++ b/vendor/themepackage.mk
@@ -0,0 +1,178 @@
+
+skip_definition:=
+ifdef LOCAL_PACKAGE_OVERRIDES
+  package_overridden := $(call set-inherited-package-variables)
+  ifeq ($(strip $(package_overridden)),)
+    skip_definition := true
+  endif
+endif
+
+ifndef skip_definition
+
+LOCAL_THEME_OVERLAY_PACKAGE := $(strip $(LOCAL_THEME_OVERLAY_PACKAGE))
+ifeq ($(LOCAL_THEME_OVERLAY_PACKAGE),)
+$(error $(LOCAL_PATH): Theme package modules *MUST* define LOCAL_THEME_OVERLAY_PACKAGE)
+endif
+
+#LOCAL_PACKAGE_NAME := $(strip $(LOCAL_PACKAGE_NAME))
+#ifeq ($(LOCAL_PACKAGE_NAME),)
+#$(error $(LOCAL_PATH): Package modules must define LOCAL_PACKAGE_NAME)
+#endif
+
+ifeq ($(strip $(LOCAL_PACKAGE_SUPPORT_OVERLAY)),)
+LOCAL_PACKAGE_SUPPORT_OVERLAY := true
+endif
+
+# The suffix of the theme package, for building  it should always be nil
+LOCAL_MODULE_SUFFIX :=
+
+LOCAL_BUILD_VENDOR_FLAG := theme
+
+ifneq ($(strip $(LOCAL_MODULE)),)
+$(error $(LOCAL_PATH): Theme package modules MUST *NOT* define LOCAL_MODULE)
+endif
+
+ifeq ($(strip $(LOCAL_THEME_NAME)),)
+LOCAL_THEME_NAME := default
+endif
+
+# If define PRODUCT_DEFAULT_THEME, treat that theme as default
+ifeq ($(strip $(PRODUCT_DEFAULT_THEME)),$(strip $(LOCAL_THEME_NAME)))
+LOCAL_THEME_NAME := default
+endif
+
+LOCAL_MODULE := $(LOCAL_THEME_NAME)$(LOCAL_THEME_OVERLAY_PACKAGE)
+
+ifeq ($(strip $(LOCAL_MANIFEST_FILE)),)
+LOCAL_MANIFEST_FILE := AndroidManifest.xml
+endif
+
+ifeq ($(strip $(LOCAL_THEME_DUMMY_MANIFEST)),)
+LOCAL_FULL_MANIFEST_FILE := $(BUILD_SYSTEM_VENDOR)/dummy/AndroidManifest.xml
+endif
+
+PRIVATE_THEME_LOCAL_PATH := $(LOCAL_PATH)
+
+# If you need to put the MANIFEST_FILE outside of LOCAL_PATH
+# you can use FULL_MANIFEST_FILE
+ifeq ($(strip $(LOCAL_FULL_MANIFEST_FILE)),)
+LOCAL_FULL_MANIFEST_FILE := $(LOCAL_PATH)/AndroidManifest.xml
+endif
+
+# Protection of dimming LOCAL_MODULE_CLASS , this means where the intermediates
+# stored in out/target/common/obj/$(LOCAL_MODULE_CLASS)
+ifneq ($(strip $(LOCAL_MODULE_CLASS)),)
+$(error $(LOCAL_PATH): Theme package modules may not set LOCAL_MODULE_CLASS)
+endif
+LOCAL_MODULE_CLASS := THEMEPACKAGE
+
+# Package LOCAL_MODULE_TAGS default to optional
+LOCAL_MODULE_TAGS := $(strip $(LOCAL_MODULE_TAGS))
+ifeq ($(LOCAL_MODULE_TAGS),)
+LOCAL_MODULE_TAGS := optional
+endif
+
+ifeq ($(filter tests, $(LOCAL_MODULE_TAGS)),)
+# Force localization check if it's not tagged as tests.
+LOCAL_AAPT_FLAGS := $(LOCAL_AAPT_FLAGS) -z
+endif
+
+# Fill LOCAL_THEME_RESOURCES
+ifneq ($(strip $(LOCAL_THEME_RESOURCES)),)
+LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/$(LOCAL_THEME_RESOURCES)
+endif
+
+ifeq (,$(LOCAL_RESOURCE_DIR))
+LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res
+endif
+
+# If is default, build pictures by overlay, not put them into theme packages.
+ifeq ($(strip $(LOCAL_PACKAGE_SUPPORT_OVERLAY)),true)
+ifeq ($(strip $(PRODUCT_BUILD_DEFAULT_THEME_BY_OVERLAY)),true)
+ifeq ($(strip $(LOCAL_THEME_NAME)),default)
+# Give and empty res location because they already build into original package
+# by overlay. It may cut some ROM sizes.
+LOCAL_RESOURCE_DIR := $(BUILD_SYSTEM_VENDOR)/dummy/res
+endif
+endif
+endif
+
+ifneq ($(strip $(LOCAL_MODULE_PATH)),)
+$(error $(LOCAL_PATH): Theme package could not define LOCAL_MODULE_PATH)
+endif # Fill LOCAL_THEME_RESOURCES
+
+ifeq ($(strip $(LOCAL_THEME_VALUES)),)
+LOCAL_THEME_VALUES_FULL_PATH := $(BUILD_SYSTEM_VENDOR)/dummy/theme_values.xml
+else
+LOCAL_THEME_VALUES_FULL_PATH := $(LOCAL_PATH)/$(LOCAL_THEME_VALUES)
+endif
+
+PRODUCT_THEME_OUT := $(PRODUCT_OUT)/system/etc/theme
+ifeq ($(strip $(LOCAL_THEME_NAME)), default)
+LOCAL_MODULE_PATH := $(PRODUCT_THEME_OUT)/default
+else
+LOCAL_MODULE_PATH := $(PRODUCT_THEME_OUT)/additional/$(LOCAL_THEME_NAME)
+endif
+# Support resources ovrelay in vendor
+package_resource_overlays := $(strip \
+    $(wildcard $(foreach dir, $(PRODUCT_PACKAGE_OVERLAYS), \
+      $(addprefix $(dir)/, $(LOCAL_RESOURCE_DIR)))) \
+    $(wildcard $(foreach dir, $(DEVICE_PACKAGE_OVERLAYS), \
+      $(addprefix $(dir)/, $(LOCAL_RESOURCE_DIR)))))
+
+LOCAL_RESOURCE_DIR := $(package_resource_overlays) $(LOCAL_RESOURCE_DIR)
+
+
+all_resources := $(strip \
+    $(foreach dir, $(LOCAL_RESOURCE_DIR), \
+      $(addprefix $(dir)/, \
+        $(patsubst res/%,%, \
+          $(call find-subdir-assets,$(dir)) \
+         ) \
+       ) \
+     ))
+
+all_res_assets := $(strip $(all_resources))
+
+package_expected_intermediates_COMMON := $(call local-intermediates-dir,COMMON)
+
+LOCAL_BUILT_MODULE_STEM := package.apk
+##### MUST include base_rules.xmk
+#################################
+include $(BUILD_SYSTEM)/base_rules.mk
+#################################
+
+full_android_manifest := $(LOCAL_FULL_MANIFEST_FILE)
+$(LOCAL_INTERMEDIATE_TARGETS): \
+    PRIVATE_ANDROID_MANIFEST := $(full_android_manifest)
+
+ifneq ($(all_resources),)
+
+endif  # all_resources
+
+# Define the rule to build the actual package.
+$(LOCAL_BUILT_MODULE): $(AAPT) | $(ZIPALIGN)
+
+# Use the global AAPT_CONFIG
+$(LOCAL_BUILT_MODULE): PRIVATE_PRODUCT_AAPT_CONFIG := $(PRODUCT_AAPT_CONFIG)
+$(LOCAL_BUILT_MODULE): PRIVATE_PRODUCT_AAPT_PREF_CONFIG := $(PRODUCT_AAPT_PREF_CONFIG)
+
+###########################################
+$(LOCAL_BUILT_MODULE): PRIVATE_THEME_VALUES_FULL_PATH := $(LOCAL_THEME_VALUES_FULL_PATH)
+$(LOCAL_BUILT_MODULE): $(all_res_assets) $(full_android_manifest)
+	@echo "target Package: $(PRIVATE_MODULE) ($@)"
+	$(create-empty-package)
+	$(add-assets-to-theme-package)
+
+############################################
+
+# Save information about this package
+PACKAGES.$(LOCAL_PACKAGE_NAME).OVERRIDES := $(strip $(LOCAL_OVERRIDES_PACKAGES))
+PACKAGES.$(LOCAL_PACKAGE_NAME).RESOURCE_FILES := $(all_resources)
+ifdef package_resource_overlays
+PACKAGES.$(LOCAL_PACKAGE_NAME).RESOURCE_OVERLAYS := $(package_resource_overlays)
+endif
+
+PACKAGES := $(PACKAGES) $(LOCAL_PACKAGE_NAME)
+
+endif # skip_definition
